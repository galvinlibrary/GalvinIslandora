<?php

/**
 * @file
 * Defines the HOCR class which can parse HOCR files as generated by Tesseract.
 *
 * Only supports searching for words at the moment but could easily be extended
 * to support line/paragraph level searches.
 */

class HOCR {

  /**
   * The HOCR file.
   * @var DOMDocument
   */
  protected $doc;
  /**
   * The XPath for querying the HOCR file.
   * @var DOMXPath
   */
  protected $xpath;

  /**
   * Instantiates an HOCR object from the given datastream.
   *
   * @param AbstractFedoraDatastream $datastream
   *   The datastream containing the HOCR file.
   *
   * @return HOCR
   *   An object of this class build from the given datastream.
   */
  public static function fromDatastream(AbstractFedoraDatastream $datastream) {
    $mime_detect = new MimeDetect();
    $ext = $mime_detect->getExtension($datastream->mimeType);
    $file = file_create_filename("{$datastream->parent->id}_{$datastream->id}.{$ext}", 'temporary://');
    $datastream->getContent($file);
    $hocr = new HOCR($file);
    file_unmanaged_delete($file);
    return $hocr;
  }

  /**
   * Checks if the given HOCR file is valid.
   *
   * At the moment this only checks if the version is supported but may do more
   * in the future.
   *
   * @param string $file
   *   The absolute path to the HOCR file.
   *
   * @return bool
   *   TRUE if the HOCR file is valid, FALSE otherwise.
   */
  public static function isValid($file) {
    if (file_exists($file)) {
      $version = self::getVersion($file);
      return version_compare($version, TESSERACT_REQUIRED_VERSION) >= 0;
    }
    return FALSE;
  }

  /**
   * Gets the version of the give HOCR file.
   *
   * Parses the meta tags in the given file to determine the version. Older
   * versions of tesseract don't include the version information.
   *
   * @param string $file
   *   The absolute path to the HOCR file.
   *
   * @return string
   *   The version if successful, FALSE otherwise.
   */
  public static function getVersion($file) {
    @$doc = simplexml_load_file($file);
    if ($doc) {
      $doc->registerXPathNamespace('ns', 'http://www.w3.org/1999/xhtml');
      $version = (string) array_pop($doc->xpath('/ns:html/ns:head/ns:meta[@name="ocr-system"]/@content'));
      $version = str_replace(array('tesseract', ' '), '', $version);
      return empty($version) ? FALSE : $version;
    }
    return FALSE;
  }

  /**
   * Instantiate an HOCR object.
   *
   * @param string $file
   *   The absolute path to the HOCR file.
   *
   * @throws InvalidArgumentException
   */
  public function __construct($file) {
    if (!self::isValid($file)) {
      throw new InvalidArgumentException('Attempted to instantiate HOCR class without a valid HOCR file.');
    }
    $this->doc = new DOMDocument('1.0', 'UTF-8');
    $this->doc->load($file);
    $this->xpath = new DOMXPath($this->doc);
    $this->xpath->registerNamespace("php", "http://php.net/xpath");
    $this->xpath->registerPhpFunctions();
    //    $this->xpath->registerPhpFunctions('mb_strtolower');
  }

  /**
   * Searches for given term properties defined by the terms classes.
   *
   * @param string $term
   *   The term to search for.
   * @param array $classes
   *   The classes of properties to return, expecting one of the following:
   *   'ocr_page', 'ocr_carea', 'ocr_par', 'ocr_line', 'ocrx_word'.
   * @param array $options
   *   Options to modify the text selection of the search:
   *   - case_sensitive: Defaults to FALSE.
   *
   * @return array
   *   The properties for each term and its respective classes.
   */
  public function search($term, array $classes = array('ocrx_word'), array $options = array('case_sensitive' => FALSE)) {
    $results = array();
    $nodes = $this->find($term, $classes, $options);
    foreach ($nodes as $node) {
      $results[] = $this->getProperties($node);
    }
    return $results;
  }

  /**
   * Find all instances of the given term in document.
   *
   * @param string $term
   *   The term to search for.
   * @param array $classes
   *   The classes of the elements to find, one or more of the following:
   *   'ocr_page', 'ocr_carea', 'ocr_par', 'ocr_line', 'ocrx_word'.
   *   If no classes are given all text nodes with the given term are returned.
   * @param array $options
   *   Options to modify the text selection of the search:
   *   - case_sensitive: Defaults to FALSE.
   *
   * @return DOMNodeList
   *   All matching elements containing the given term and classes.
   */
  protected function find($term, array $classes, array $options) {
    $query = $this->getTextQuery($term, $options);
    if (!empty($classes)) {
      $classes = array_map(function($class) {return "@class = '{$class}'";}, $classes);
      $classes = implode(' or ', $classes);
      $query = "{$query}/ancestor-or-self::node()[{$classes}]";
      debug($query);
      return $this->xpath->query($query);
    }
    return $this->xpath->query($query);
  }

  /**
   * Generates a query for finding the given term.
   *
   * @param string $term
   *   The term to search for.
   * @param array $options
   *   Options to modify the text selection of the search:
   *   - case_sensitive: Defaults to FALSE.
   *
   * @return string
   *   An XPath that will select all instances of the given term.
   */
  protected function getTextQuery($term, array $options) {
    if (isset($options['case_sensitive']) && $options['case_sensitive']) {
      return "//*[text() = '{$term}']";
    }
    $term = mb_strtolower($term);
    return "//*[php:functionString('mb_strtolower', text()) = '{$term}']";
  }

  /**
   * Gets all the defined properties for the given element.
   *
   * @param DOMElement $element
   *   The element.
   *
   * @return array
   *   An associative array of properties as follows:
   *   - id: The id of the given element.
   *   - class: The class of the given element, 'ocrx_word', 'ocr_line', etc.
   *   - dir: The direction of the written text either 'ltr' or 'rtl'.
   *   - bbox: The bounding box  of the given element.
   *     - l: The left most point of the element in pixels.
   *     - t: The top most point of the element in pixels.
   *     - r: The right most point of the element in pixels.
   *     - b: The bottom most point of the element in pixels.
   */
  protected function getProperties(DOMElement $element) {
    $bbox = NULL;
    if ($element->hasAttribute('title')) {
      $matches = array();
      $title = $element->getAttribute('title');
      preg_match('/bbox ([0-9]*) ([0-9]*) ([0-9]*) ([0-9]*)/', $title, $matches);
      $bbox = array(
        'l' => intval($matches[1]),
        't' => intval($matches[2]),
        'r' => intval($matches[3]),
        'b' => intval($matches[4]),
      );
    }
    return array_filter(array(
      'id' => $element->hasAttribute('id') ? $element->getAttribute('id') : NULL,
      'class' => $element->hasAttribute('class') ? $element->getAttribute('class') : NULL,
      'dir' => $element->hasAttribute('dir') ? $element->getAttribute('dir') : NULL,
      'bbox' => $bbox,
      ));
  }
}
